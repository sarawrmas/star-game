{"version":3,"sources":["components/PlayAgain.js","utils/helpers.js","components/PlayNumber.js","components/StarsDisplay.js","components/Game.js","App.js","reportWebVitals.js","index.js"],"names":["PlayAgain","props","className","style","color","gameStatus","onClick","mathOp","sum","arr","reduce","acc","curr","range","min","max","Array","from","length","_","i","random","Math","floor","randomSumIn","sets","sums","j","len","candidateSet","concat","candidateSum","push","colors","available","used","wrong","candidate","PlayNumber","backgroundColor","status","number","StarsDisplay","count","map","starId","Game","useState","stars","setStars","availableNums","setAvailableNums","candidateNums","setCandidateNums","secondsLeft","setSecondsLeft","useEffect","timerId","setTimeout","clearTimeout","setGameState","newCandidateNums","newAvailableNums","filter","n","includes","useGameState","candidatesAreWrong","numberStatus","onNumberClick","currentStatus","cn","startNewGame","App","gameId","setGameId","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.49fad17c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst PlayAgain = (props) => (\r\n  <div className=\"game-done\">\r\n    <div className=\"message\" style={{ color: props.gameStatus === \"lost\" ? 'red' : 'Green'}}>\r\n      {props.gameStatus === 'lost' ? 'Game Over' : 'You Won!'}\r\n    </div>\r\n    <button onClick={props.onClick}>Play Again</button>\r\n  </div>\r\n)\r\n\r\nexport default PlayAgain;","import { useState, useEffect } from 'react';\r\n\r\n// Math\r\nexport const mathOp = {\r\n  // Sum an array\r\n  sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\r\n\r\n  // create an array of numbers between min and max (edges included)\r\n  range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\r\n\r\n  // pick a random number between min and max (edges included)\r\n  random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\r\n\r\n  // Given an array of numbers and a max...\r\n  // Pick a random sum (< max) from the set of all available sums in arr\r\n  randomSumIn: (arr, max) => {\r\n    const sets = [[]];\r\n    const sums = [];\r\n    for (let i = 0; i < arr.length; i++) {\r\n      for (let j = 0, len = sets.length; j < len; j++) {\r\n        const candidateSet = sets[j].concat(arr[i]);\r\n        const candidateSum = mathOp.sum(candidateSet);\r\n        if (candidateSum <= max) {\r\n          sets.push(candidateSet);\r\n          sums.push(candidateSum);\r\n        }\r\n      }\r\n    }\r\n    return sums[mathOp.random(0, sums.length - 1)];\r\n  },\r\n};\r\n\r\n// Color Theme\r\nexport const colors = {\r\n  available: 'lightgray',\r\n  used: 'lightgreen',\r\n  wrong: 'lightcoral',\r\n  candidate: 'deepskyblue',\r\n};\r\n\r\nexport const useGameState = () => {\r\n  const [stars, setStars] = useState(mathOp.random(1,9));\r\n  const [availableNums, setAvailableNums] = useState(mathOp.range(1,9));\r\n  const [candidateNums, setCandidateNums] = useState([])\r\n  const [secondsLeft, setSecondsLeft] = useState(10);\r\n  \r\n  useEffect(() => {\r\n    if (secondsLeft > 0 && availableNums.length > 0) {\r\n      const timerId = setTimeout(() => {\r\n        setSecondsLeft(secondsLeft - 1)\r\n      }, 1000)\r\n      return () => clearTimeout(timerId);\r\n    }\r\n  });\r\n  \r\n  const setGameState = (newCandidateNums) => {\r\n    if (mathOp.sum(newCandidateNums) !== stars) {\r\n      setCandidateNums(newCandidateNums)\r\n    } else {\r\n      const newAvailableNums = availableNums.filter(\r\n        n => !newCandidateNums.includes(n)\r\n      )\r\n      setStars(mathOp.randomSumIn(newAvailableNums, 9))\r\n      setAvailableNums(newAvailableNums);\r\n      setCandidateNums([])\r\n    }\r\n  };\r\n  \r\n  return { stars, availableNums, candidateNums, secondsLeft, setGameState };\r\n}","import React from 'react';\r\nimport { colors } from '../utils/helpers';\r\n\r\nconst PlayNumber = (props) => {\r\n  const handleChange = () => {\r\n    props.onClick(props.number, props.status)\r\n  }\r\n  return (\r\n    <button\r\n      className=\"number\"\r\n      style={{backgroundColor: colors[props.status]}}\r\n      onClick={handleChange}\r\n    >\r\n      {props.number}\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default PlayNumber;","import React from 'react';\r\nimport { mathOp } from '../utils/helpers';\r\n\r\nconst StarsDisplay = (props) => (\r\n  <>\r\n    {mathOp.range(1, props.count).map(starId => (\r\n      <div key={starId} className=\"star\" />\r\n    ))}\r\n  </>\r\n)\r\n\r\nexport default StarsDisplay;","import React from 'react';\r\nimport PlayAgain from './PlayAgain';\r\nimport PlayNumber from './PlayNumber';\r\nimport StarsDisplay from './StarsDisplay';\r\nimport { mathOp, useGameState } from '../utils/helpers';\r\n\r\nconst Game = (props) => {\r\n  const {\r\n    stars,\r\n    availableNums,\r\n    candidateNums,\r\n    secondsLeft,\r\n    setGameState\r\n  } = useGameState();\r\n  \r\n  const candidatesAreWrong = mathOp.sum(candidateNums) > stars;\r\n  const gameStatus = availableNums.length === 0\r\n  ? 'won'\r\n  : secondsLeft === 0\r\n    ? 'lost'\r\n    : 'active';\r\n  \r\n  const numberStatus = (number) => {\r\n    if (!availableNums.includes(number)) {\r\n      return 'used';\r\n    }\r\n    if (candidateNums.includes(number)) {\r\n      return candidatesAreWrong ? 'wrong' : 'candidate'\r\n    }\r\n    return 'available'\r\n  }\r\n  \r\n  const onNumberClick = (number, currentStatus) => {\r\n    if (gameStatus !== 'active' || currentStatus === \"used\") {\r\n      return;\r\n    }\r\n    const newCandidateNums =\r\n    currentStatus === 'available'\r\n      ? candidateNums.concat(number)\r\n      : candidateNums.filter(cn => cn !== number);\r\n\r\n    setGameState(newCandidateNums);\r\n  }\r\n  \r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"help\">\r\n        Pick 1 or more numbers that sum to the number of stars\r\n      </div>\r\n      <div className=\"body\">\r\n        <div className=\"left\">\r\n          {gameStatus !== 'active' ? (\r\n            <PlayAgain onClick={props.startNewGame} gameStatus={gameStatus} />\r\n          ) : (\r\n            <StarsDisplay count={stars} />\r\n          )}\r\n        </div>\r\n        <div className=\"right\">\r\n          {mathOp.range(1,9).map(number => (\r\n            <PlayNumber\r\n              key={number}\r\n              status={numberStatus(number)}\r\n              number={number}\r\n              onClick={onNumberClick}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <div className=\"timer\">Time Remaining: {secondsLeft}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;","import React, { useState } from 'react';\nimport Game from './components/Game';\n\nconst App = () => {\n  const [gameId, setGameId] = useState(1);\n  return <Game key={gameId} startNewGame={() => setGameId(gameId + 1)} />\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}